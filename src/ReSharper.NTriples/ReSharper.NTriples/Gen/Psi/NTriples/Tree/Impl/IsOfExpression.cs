//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414
// ReSharper disable RedundantNameQualifier
using System;
using JetBrains.ReSharper.Psi.Tree;
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
using ReSharper.NTriples.Tree;
using ReSharper.NTriples.Parsing;
namespace ReSharper.NTriples.Impl.Tree {
  internal partial class IsOfExpression : NTriplesCompositeElement, ReSharper.NTriples.Tree.IIsOfExpression {
    public const short ISKEYWORD= ChildRole.LAST + 1;
    public const short EXPRESSION= ChildRole.LAST + 2;
    public const short OFKEYWORD= ChildRole.LAST + 3;
    internal IsOfExpression() : base() {
    }
    public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType NodeType {
      get { return ReSharper.NTriples.Impl.Tree.ElementType.IS_OF_EXPRESSION; }
    }
    public override void Accept(ReSharper.NTriples.Tree.TreeNodeVisitor visitor) {
      visitor.VisitIsOfExpression(this);
    }
    public override void Accept<TContext>(ReSharper.NTriples.Tree.TreeNodeVisitor<TContext> visitor, TContext context) {
      visitor.VisitIsOfExpression(this, context);
    }
    public override TReturn Accept<TContext, TReturn>(ReSharper.NTriples.Tree.TreeNodeVisitor<TContext, TReturn> visitor, TContext context) {
      return visitor.VisitIsOfExpression(this, context);
    }
    private static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short> CHILD_ROLES = new JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short>(
      new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>[]
      {
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(ReSharper.NTriples.Impl.Tree.TokenType.IS_KEYWORD, ISKEYWORD),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(ReSharper.NTriples.Impl.Tree.ElementType.EXPRESSION, EXPRESSION),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(ReSharper.NTriples.Impl.Tree.TokenType.OF_KEYWORD, OFKEYWORD),
      }
    );
    public override short GetChildRole(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement child) {
      return CHILD_ROLES[child.NodeType];
    }
    public virtual ReSharper.NTriples.Tree.IExpression Expression {
      get { return (ReSharper.NTriples.Tree.IExpression) FindChildByRole(EXPRESSION); }
    }
    public virtual JetBrains.ReSharper.Psi.Tree.ITokenNode IsKeyword {
      get { return (JetBrains.ReSharper.Psi.Tree.ITokenNode) FindChildByRole(ISKEYWORD); }
    }
    public virtual JetBrains.ReSharper.Psi.Tree.ITokenNode OfKeyword {
      get { return (JetBrains.ReSharper.Psi.Tree.ITokenNode) FindChildByRole(OFKEYWORD); }
    }
    public virtual ReSharper.NTriples.Tree.IExpression SetExpression (ReSharper.NTriples.Tree.IExpression param)
    {
      using (JetBrains.Application.WriteLockCookie.Create(this.IsPhysical()))
      {
        TreeElement current = null, next = GetNextFilteredChild(current), result = null;
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (ReSharper.NTriples.Tree.IExpression)result;
        } else {
          if (next.NodeType == ReSharper.NTriples.Impl.Tree.TokenType.IS_KEYWORD) {
            current = next;
          } else {
            return (ReSharper.NTriples.Tree.IExpression) result;
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          if (param == null) return null;
          result = current = (TreeElement) JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter(this, current, (JetBrains.ReSharper.Psi.Tree.ITreeNode) param);
        } else {
          if (next.NodeType == ReSharper.NTriples.Impl.Tree.ElementType.EXPRESSION) {
            if (param != null) {
              result = current = (TreeElement) JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode) param);
            } else {
              current = GetNextFilteredChild(next);
              JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild(next);
            }
          } else {
            if (param == null) return null;
            result = (TreeElement) JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode) param);
            current = next;
          }
        }
        return (ReSharper.NTriples.Tree.IExpression)result;
      }
    }
    public override string ToString() {
      return "IIsOfExpression";
    }
  }
}
