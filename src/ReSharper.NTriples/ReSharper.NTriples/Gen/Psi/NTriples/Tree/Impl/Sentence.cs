//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414
// ReSharper disable RedundantNameQualifier
using System;
using JetBrains.ReSharper.Psi.Tree;
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
using ReSharper.NTriples.Tree;
using ReSharper.NTriples.Parsing;
namespace ReSharper.NTriples.Impl.Tree {
  internal partial class Sentence : NTriplesCompositeElement, ReSharper.NTriples.Tree.ISentence {
    public const short STATEMENT= ChildRole.LAST + 1;
    public const short DIRECTIVE= ChildRole.LAST + 2;
    internal Sentence() : base() {
    }
    public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType NodeType {
      get { return ReSharper.NTriples.Impl.Tree.ElementType.SENTENCE; }
    }
    public override void Accept(ReSharper.NTriples.Tree.TreeNodeVisitor visitor) {
      visitor.VisitSentence(this);
    }
    public override void Accept<TContext>(ReSharper.NTriples.Tree.TreeNodeVisitor<TContext> visitor, TContext context) {
      visitor.VisitSentence(this, context);
    }
    public override TReturn Accept<TContext, TReturn>(ReSharper.NTriples.Tree.TreeNodeVisitor<TContext, TReturn> visitor, TContext context) {
      return visitor.VisitSentence(this, context);
    }
    private static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short> CHILD_ROLES = new JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short>(
      new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>[]
      {
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(ReSharper.NTriples.Impl.Tree.ElementType.STATEMENT, STATEMENT),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(ReSharper.NTriples.Impl.Tree.ElementType.DIRECTIVE, DIRECTIVE),
      }
    );
    public override short GetChildRole(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement child) {
      return CHILD_ROLES[child.NodeType];
    }
    public virtual ReSharper.NTriples.Tree.IDirective Directive {
      get { return (ReSharper.NTriples.Tree.IDirective) FindChildByRole(DIRECTIVE); }
    }
    public virtual ReSharper.NTriples.Tree.IStatement Statement {
      get { return (ReSharper.NTriples.Tree.IStatement) FindChildByRole(STATEMENT); }
    }
    public virtual ReSharper.NTriples.Tree.IDirective SetDirective (ReSharper.NTriples.Tree.IDirective param)
    {
      using (JetBrains.Application.WriteLockCookie.Create(this.IsPhysical()))
      {
        TreeElement current = null, next = GetNextFilteredChild(current), result = null;
        next = GetNextFilteredChild(current);
        if (next.NodeType == ReSharper.NTriples.Impl.Tree.ElementType.STATEMENT) {
          next = GetNextFilteredChild (current);
          if (next == null) {
            if (param == null) return null;
            result = current = (TreeElement) JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter(this, current, (JetBrains.ReSharper.Psi.Tree.ITreeNode) param);
          } else {
            if (next.NodeType == ReSharper.NTriples.Impl.Tree.ElementType.STATEMENT) {
              if (param != null) {
                result = current = (TreeElement) JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode) param);
              } else {
                current = GetNextFilteredChild(next);
                JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild(next);
              }
            } else {
              if (param == null) return null;
              result = (TreeElement) JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode) param);
              current = next;
            }
          }
        }
        else if (next.NodeType == ReSharper.NTriples.Impl.Tree.ElementType.DIRECTIVE) {
          next = GetNextFilteredChild (current);
          if (next == null) {
            if (param == null) return null;
            result = current = (TreeElement) JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter(this, current, (JetBrains.ReSharper.Psi.Tree.ITreeNode) param);
          } else {
            if (next.NodeType == ReSharper.NTriples.Impl.Tree.ElementType.DIRECTIVE) {
              if (param != null) {
                result = current = (TreeElement) JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode) param);
              } else {
                current = GetNextFilteredChild(next);
                JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild(next);
              }
            } else {
              if (param == null) return null;
              result = (TreeElement) JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode) param);
              current = next;
            }
          }
        }
        else {
          next = GetNextFilteredChild (current);
          if (next == null) {
            if (param == null) return null;
            result = current = (TreeElement) JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter(this, current, (JetBrains.ReSharper.Psi.Tree.ITreeNode) param);
          } else {
            if (next.NodeType == ReSharper.NTriples.Impl.Tree.ElementType.STATEMENT) {
              if (param != null) {
                result = current = (TreeElement) JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode) param);
              } else {
                current = GetNextFilteredChild(next);
                JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild(next);
              }
            } else {
              if (param == null) return null;
              result = (TreeElement) JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode) param);
              current = next;
            }
          }
        }
        return (ReSharper.NTriples.Tree.IDirective)result;
      }
    }
    public virtual ReSharper.NTriples.Tree.IStatement SetStatement (ReSharper.NTriples.Tree.IStatement param)
    {
      using (JetBrains.Application.WriteLockCookie.Create(this.IsPhysical()))
      {
        TreeElement current = null, next = GetNextFilteredChild(current), result = null;
        next = GetNextFilteredChild(current);
        if (next.NodeType == ReSharper.NTriples.Impl.Tree.ElementType.STATEMENT) {
          next = GetNextFilteredChild (current);
          if (next == null) {
            if (param == null) return null;
            result = current = (TreeElement) JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter(this, current, (JetBrains.ReSharper.Psi.Tree.ITreeNode) param);
          } else {
            if (next.NodeType == ReSharper.NTriples.Impl.Tree.ElementType.STATEMENT) {
              if (param != null) {
                result = current = (TreeElement) JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode) param);
              } else {
                current = GetNextFilteredChild(next);
                JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild(next);
              }
            } else {
              if (param == null) return null;
              result = (TreeElement) JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode) param);
              current = next;
            }
          }
        }
        else if (next.NodeType == ReSharper.NTriples.Impl.Tree.ElementType.DIRECTIVE) {
          next = GetNextFilteredChild (current);
          if (next == null) {
            if (param == null) return null;
            result = current = (TreeElement) JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter(this, current, (JetBrains.ReSharper.Psi.Tree.ITreeNode) param);
          } else {
            if (next.NodeType == ReSharper.NTriples.Impl.Tree.ElementType.DIRECTIVE) {
              if (param != null) {
                result = current = (TreeElement) JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode) param);
              } else {
                current = GetNextFilteredChild(next);
                JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild(next);
              }
            } else {
              if (param == null) return null;
              result = (TreeElement) JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode) param);
              current = next;
            }
          }
        }
        else {
          next = GetNextFilteredChild (current);
          if (next == null) {
            if (param == null) return null;
            result = current = (TreeElement) JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter(this, current, (JetBrains.ReSharper.Psi.Tree.ITreeNode) param);
          } else {
            if (next.NodeType == ReSharper.NTriples.Impl.Tree.ElementType.STATEMENT) {
              if (param != null) {
                result = current = (TreeElement) JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode) param);
              } else {
                current = GetNextFilteredChild(next);
                JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild(next);
              }
            } else {
              if (param == null) return null;
              result = (TreeElement) JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode) param);
              current = next;
            }
          }
        }
        return (ReSharper.NTriples.Tree.IStatement)result;
      }
    }
    public override string ToString() {
      return "ISentence";
    }
  }
}
