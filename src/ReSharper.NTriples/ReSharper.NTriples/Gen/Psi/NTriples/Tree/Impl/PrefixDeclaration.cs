//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414
// ReSharper disable RedundantNameQualifier
using System;
using JetBrains.ReSharper.Psi.Tree;
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
using ReSharper.NTriples.Tree;
using ReSharper.NTriples.Parsing;
namespace ReSharper.NTriples.Impl.Tree {
  internal partial class PrefixDeclaration : NTriplesCompositeElement, ReSharper.NTriples.Tree.IPrefixDeclaration {
    public const short PREFIX= ChildRole.LAST + 1;
    public const short IDENTIFIER= ChildRole.LAST + 3;
    public const short URISTRING= ChildRole.LAST + 4;
    internal PrefixDeclaration() : base() {
    }
    public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType NodeType {
      get { return ReSharper.NTriples.Impl.Tree.ElementType.PREFIX_DECLARATION; }
    }
    public override void Accept(ReSharper.NTriples.Tree.TreeNodeVisitor visitor) {
      visitor.VisitPrefixDeclaration(this);
    }
    public override void Accept<TContext>(ReSharper.NTriples.Tree.TreeNodeVisitor<TContext> visitor, TContext context) {
      visitor.VisitPrefixDeclaration(this, context);
    }
    public override TReturn Accept<TContext, TReturn>(ReSharper.NTriples.Tree.TreeNodeVisitor<TContext, TReturn> visitor, TContext context) {
      return visitor.VisitPrefixDeclaration(this, context);
    }
    private static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short> CHILD_ROLES = new JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<short>(
      new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>[]
      {
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(ReSharper.NTriples.Impl.Tree.TokenType.PREFIX_KEYWORD, PREFIX),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(ReSharper.NTriples.Impl.Tree.TokenType.STD_PREFIX_KEYWORD, PREFIX),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(ReSharper.NTriples.Impl.Tree.ElementType.PREFIX_NAME, IDENTIFIER),
        new System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, short>(ReSharper.NTriples.Impl.Tree.ElementType.PREFIX_URI, URISTRING),
      }
    );
    public override short GetChildRole(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement child) {
      return CHILD_ROLES[child.NodeType];
    }
    public virtual JetBrains.ReSharper.Psi.Tree.ITokenNode Prefix {
      get { return (JetBrains.ReSharper.Psi.Tree.ITokenNode) FindChildByRole(PREFIX); }
    }
    public virtual ReSharper.NTriples.Tree.IPrefixName PrefixName {
      get { return (ReSharper.NTriples.Tree.IPrefixName) FindChildByRole(IDENTIFIER); }
    }
    public virtual ReSharper.NTriples.Tree.IPrefixUri PrefixUri {
      get { return (ReSharper.NTriples.Tree.IPrefixUri) FindChildByRole(URISTRING); }
    }
    public virtual  JetBrains.ReSharper.Psi.Tree.ITokenNode UriString {
      get
      {
        CompositeElement current = this;  
    
        JetBrains.ReSharper.Psi.Tree.ITokenNode result = null;
        CompositeElement current0 = (CompositeElement)current.FindChildByRole (ReSharper.NTriples.Impl.Tree.PrefixDeclaration.URISTRING);
        if (current0 != null) {
          TreeElement current1 = current0.FindChildByRole (ReSharper.NTriples.Impl.Tree.PrefixUri.URISTRING);
          if (current1 != null) {
            result = (JetBrains.ReSharper.Psi.Tree.ITokenNode) current1;
          }
        }
        return result;
      }
    }
    public virtual ReSharper.NTriples.Tree.IPrefixName SetPrefixName (ReSharper.NTriples.Tree.IPrefixName param)
    {
      using (JetBrains.Application.WriteLockCookie.Create(this.IsPhysical()))
      {
        TreeElement current = null, next = GetNextFilteredChild(current), result = null;
        next = GetNextFilteredChild(current);
        if (next.NodeType == ReSharper.NTriples.Impl.Tree.TokenType.PREFIX_KEYWORD) {
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (ReSharper.NTriples.Tree.IPrefixName)result;
          } else {
            if (next.NodeType == ReSharper.NTriples.Impl.Tree.TokenType.PREFIX_KEYWORD) {
              current = next;
            } else {
              return (ReSharper.NTriples.Tree.IPrefixName) result;
            }
          }
        }
        else if (next.NodeType == ReSharper.NTriples.Impl.Tree.TokenType.STD_PREFIX_KEYWORD) {
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (ReSharper.NTriples.Tree.IPrefixName)result;
          } else {
            if (next.NodeType == ReSharper.NTriples.Impl.Tree.TokenType.STD_PREFIX_KEYWORD) {
              current = next;
            } else {
              return (ReSharper.NTriples.Tree.IPrefixName) result;
            }
          }
        }
        else return null;
        next = GetNextFilteredChild (current);
        if (next == null) {
          if (param == null) return null;
          result = current = (TreeElement) JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter(this, current, (JetBrains.ReSharper.Psi.Tree.ITreeNode) param);
        } else {
          if (next.NodeType == ReSharper.NTriples.Impl.Tree.ElementType.PREFIX_NAME) {
            if (param != null) {
              result = current = (TreeElement) JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode) param);
            } else {
              current = GetNextFilteredChild(next);
              JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild(next);
            }
          } else {
            if (param == null) return null;
            result = (TreeElement) JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode) param);
            current = next;
          }
        }
        return (ReSharper.NTriples.Tree.IPrefixName)result;
      }
    }
    public virtual ReSharper.NTriples.Tree.IPrefixUri SetPrefixUri (ReSharper.NTriples.Tree.IPrefixUri param)
    {
      using (JetBrains.Application.WriteLockCookie.Create(this.IsPhysical()))
      {
        TreeElement current = null, next = GetNextFilteredChild(current), result = null;
        next = GetNextFilteredChild(current);
        if (next.NodeType == ReSharper.NTriples.Impl.Tree.TokenType.PREFIX_KEYWORD) {
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (ReSharper.NTriples.Tree.IPrefixUri)result;
          } else {
            if (next.NodeType == ReSharper.NTriples.Impl.Tree.TokenType.PREFIX_KEYWORD) {
              current = next;
            } else {
              return (ReSharper.NTriples.Tree.IPrefixUri) result;
            }
          }
        }
        else if (next.NodeType == ReSharper.NTriples.Impl.Tree.TokenType.STD_PREFIX_KEYWORD) {
          next = GetNextFilteredChild (current);
          if (next == null) {
            return (ReSharper.NTriples.Tree.IPrefixUri)result;
          } else {
            if (next.NodeType == ReSharper.NTriples.Impl.Tree.TokenType.STD_PREFIX_KEYWORD) {
              current = next;
            } else {
              return (ReSharper.NTriples.Tree.IPrefixUri) result;
            }
          }
        }
        else return null;
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (ReSharper.NTriples.Tree.IPrefixUri)result;
        } else {
          if (next.NodeType == ReSharper.NTriples.Impl.Tree.ElementType.PREFIX_NAME) {
            current = next;
          } else {
            return (ReSharper.NTriples.Tree.IPrefixUri) result;
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          return (ReSharper.NTriples.Tree.IPrefixUri)result;
        } else {
          if (next.NodeType == ReSharper.NTriples.Impl.Tree.TokenType.URI_BEGIN) {
            current = next;
          } else {
            return (ReSharper.NTriples.Tree.IPrefixUri) result;
          }
        }
        next = GetNextFilteredChild (current);
        if (next == null) {
          if (param == null) return null;
          result = current = (TreeElement) JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildAfter(this, current, (JetBrains.ReSharper.Psi.Tree.ITreeNode) param);
        } else {
          if (next.NodeType == ReSharper.NTriples.Impl.Tree.ElementType.PREFIX_URI) {
            if (param != null) {
              result = current = (TreeElement) JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.ReplaceChild(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode) param);
            } else {
              current = GetNextFilteredChild(next);
              JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.DeleteChild(next);
            }
          } else {
            if (param == null) return null;
            result = (TreeElement) JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ModificationUtil.AddChildBefore(next, (JetBrains.ReSharper.Psi.Tree.ITreeNode) param);
            current = next;
          }
        }
        return (ReSharper.NTriples.Tree.IPrefixUri)result;
      }
    }
    public override string ToString() {
      return "IPrefixDeclaration";
    }
  }
}
